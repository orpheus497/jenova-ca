# Main Configuration for The JENOVA Cognitive Architecture
model:
  # Path to GGUF model file (optional - will auto-discover if not found)
  # System searches: /usr/local/share/models, then ./models
  model_path: '/usr/local/share/models/model.gguf'
  
  # CPU threads for inference (-1 = auto-detect, 0 = use all available)
  # Auto-detection uses physical cores only (excludes hyperthreads)
  # Manual override: set to specific number (e.g., 4, 8, 16)
  threads: -1
  
  # GPU layers to offload (-1 = all available layers with dynamic VRAM management)
  # System automatically manages VRAM and falls back gracefully if needed
  # -1: Attempts full GPU offload with intelligent fallback
  # 0: CPU-only mode
  # N: Specific number of layers (manual override)
  gpu_layers: -1
  
  # Lock model in RAM to prevent swapping (recommended for performance)
  # Set to false if system has limited RAM
  mlock: true
  
  # Batch size for prompt processing
  n_batch: 512
  
  # Context window size (tokens the model can process at once)
  # Typical values: 2048, 4096, 8192
  # Higher values require more VRAM/RAM
  context_size: 8192
  
  # Maximum tokens to generate per response
  max_tokens: 512
  
  # Temperature for generation (0.0 = deterministic, 1.0 = very creative)
  temperature: 0.7
  
  # Top-p (nucleus) sampling
  top_p: 0.95
  
  # Embedding model for semantic search (sentence-transformers)
  # Uses CPU to maximize VRAM availability for LLM
  # Shared across all memory systems for efficiency
  embedding_model: 'all-MiniLM-L6-v2'

# Hardware detection and optimization settings
hardware:
  # Show detailed hardware detection info at startup
  show_details: false

  # Preferred compute device: 'auto', 'cuda', 'opencl', 'vulkan', 'metal', 'cpu'
  # - auto: Automatically select best available device (NVIDIA > Intel Arc > AMD > Intel integrated > CPU)
  # - cuda: Force NVIDIA GPU (CUDA backend)
  # - opencl: Force OpenCL backend (AMD GPU/APU, Intel GPU)
  # - vulkan: Force Vulkan backend (cross-platform GPU)
  # - metal: Force Metal backend (Apple Silicon, Intel on macOS)
  # - cpu: Force CPU-only mode
  prefer_device: 'auto'

  # Device index: which GPU to use if multiple are available (0 = first, 1 = second, etc.)
  # Useful for multi-GPU systems or laptops with integrated + discrete GPUs
  device_index: 0

  # Memory management strategy (overrides auto-detection if set)
  # - auto: Let system decide based on available RAM/SWAP
  # - performance: Use mlock for RAM persistence (requires sufficient RAM)
  # - balanced: Use mmap without mlock (allows swap usage)
  # - swap_optimized: Optimize for systems that rely heavily on swap
  # - minimal: Reduce memory usage (lower context, smaller batch)
  memory_strategy: 'auto'

memory:
  preload_memories: true
  episodic_db_path: "memory_db/episodic"
  semantic_db_path: "memory_db/semantic"
  procedural_db_path: "memory_db/procedural"
  reflection_interval: 3 # Reflect every 3 conversation turns

cortex:
  relationship_weights:
    last_updated: null
    elaborates_on: 1.5
    conflicts_with: 2.0
    related_to: 1.0
    develops: 1.5
    summarizes: 1.2
  pruning:
    enabled: true
    prune_interval: 10 # Prune every 10 reflection cycles
    max_age_days: 30 # Prune nodes older than 30 days
    min_centrality: 0.1 # Prune nodes with centrality less than 0.1

scheduler:
  generate_insight_interval: 5
  generate_assumption_interval: 7
  proactively_verify_assumption_interval: 8
  reflect_interval: 10
  reorganize_insights_interval: 10
  process_documents_interval: 15

memory_search:
  semantic_n_results: 5
  episodic_n_results: 3
  procedural_n_results: 3
  insight_n_results: 5

tools:
  file_sandbox_path: "~/jenova_files"
  # Whitelist of safe commands for the execute_shell_command tool.
  # Only commands listed here are allowed to be executed.
  shell_command_whitelist:
    - ls
    - cat
    - grep
    - find
    - echo
    - date
    - whoami
    - pwd
    - uname
